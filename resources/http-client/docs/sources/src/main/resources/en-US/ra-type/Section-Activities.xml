<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_activities">

	<title>Activities</title>

	<para>The single activity object for &THIS.RA; Resource Adaptor is the <literal>net.java.client.slee.resource.http.HttpClientActivity</literal> interface. Through the activity an SBB can send multiple HTTP requests, and receive the related responses asynchronously. Due to the nature of SLEE activities, this RA activity acts like a queue of requests, allowing the processing of their responses - the events- in a serialized way</para>
	
	<para>An activity starts on demand by an SBB, through the RA SBB Interface, and it ends when the response is received, or when the SBB invokes its <literal>endActivity()</literal> method.</para>
	
	<para>The <literal>HttpClientActivity</literal> interface is defined as follows:</para>
	
	<programlisting language="Java" role="JAVA">
		<![CDATA[
package net.java.client.slee.resource.http;

import org.apache.commons.httpclient.HttpMethod;

public interface HttpClientActivity {

	public String getSessionId();

	public void endActivity();

	public boolean getEndOnReceivingResponse();
	
	public HttpContext getHttpContext();
	
	public void execute(HttpUriRequest request,
		Object requestApplicationData);
	
	public void execute(HttpHost target, 
		HttpRequest request, 
		Object requestApplicationData);
}]]>
     </programlisting>

	<variablelist>
		<varlistentry>
			<term>
				The
				<literal>getSessionId()</literal>
				method:
			</term>
			<listitem>
				<para>Retrieves the activity unique Id.</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>
				The
				<literal>getEndOnReceivingResponse()</literal>
				method:
			</term>
			<listitem>
				<para>Returns true if this Activity is set to end as soon as the
					Response is received.</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>
				The
				<literal>getHttpContext()</literal>
				method:
			</term>
			<listitem>
				<para>Retrieves the http context used to send requests.</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>
				The
				<literal>execute(HttpUriRequest, Object)</literal>
				method:
			</term>
			<listitem>
				<para>
					Executes the specified HTTP request asynchronously. The application may optionally provide a data object, to be returned in the HTTP response event, for instance an object which uniquely identifies the request sent.
				</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>
				The
				<literal>execute(HttpHost, HttpRequest, Object)</literal>
				method:
			</term>
			<listitem>
				<para>
					Executes the specified HTTP request asynchronously, targeting the provided HTTP host. The application may optionally provide a data object, to be returned in the HTTP response event, for instance an object which uniquely identifies the request sent.
				</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>
				The
				<literal>endActivity()</literal>
				method:
			</term>
			<listitem>
				<para>Ends the activity and its related Activity Context.</para>
			</listitem>
		</varlistentry>
	</variablelist>	
</section>