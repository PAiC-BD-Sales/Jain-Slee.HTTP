<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_sbb_code_examples">

    <title>Sbb Code Examples</title>

    <para>The following code examples shows how to use the Resource Adaptor Type for common functionalities</para>

    <section id="ratype_sbb_code_examples_sync_operations">

        <title>Synchronous Operations</title>

        <para>The following code examples the usage of the RA's SBB Interface to send synchronous HTTP requests:</para>

        <programlisting language="Java" role="JAVA">
            <![CDATA[
    HttpGet request = new HttpGet(syndFeed.getLink());
    try {
        Response response = raSbbInterface.getHttpClient.execute(request);
    } catch (Throwable e) {
        tracer.severe("Error while sending request",e);
    }
            ]]>
        </programlisting>
    </section>

    <section id="ratype_sbb_code_examples_async_operations">

        <title>Asynchronous Operations</title>

        <para>The following code examples the creation and usage of the HttpClientActivity to send an async HTTP GET requests the optimal way to use the RA, since it doesn't block the SLEE container event routing threads:</para>

        <programlisting language="Java" role="JAVA">
            <![CDATA[
    HttpGet request = new HttpGet(syndFeed.getLink());
    try {
        HttpClientActivity clientActivity = raSbbInterface.createHttpClientActivity(true,null);
        ActivityContextInterface clientAci = httpClientAci.getActivityContextInterface(clientActivity);
        clientAci.attach(sbbContext.getSbbLocalObject());
        clientActivity.execute(request,syndFeed.getLink());
    } catch (Throwable e) {
        tracer.severe("Error while creating HttpClientActivity",e);
    }
            ]]>
        </programlisting>

        <para>When there is an exception during a HTTP request execution, RA fires a HTTP response event with a null HTTP response object. The thrown exception is accesible through the <literal>ResponseEvent.getException()</literal> method. Such situation, if not processed correctly, leads to the runtime NPE exception. SBBs, during the response event processing, should first call the <literal>ResponseEvent.getException()</literal> method and only if that gives back null then they should call the <literal>ResponseEvent.getHttpResponse()</literal>.</para>

        <para>The following code examples the handling of the response event:</para>

        <programlisting language="Java" role="JAVA">
            <![CDATA[
    public void onResponseEvent(ResponseEvent event, ActivityContextInterface aci) {
        tracer.info("********** onResponseEvent **************");
        if (event.getException() == null) {
            HttpResponse response = event.getHttpResponse();
            tracer.info("URI = " + event.getRequestApplicationData());
            tracer.info("Status Code = " + response.getStatusLine().getStatusCode());
            try {
                tracer.info("Response Body = " + EntityUtils.toString(response.getEntity()));
            } catch (Exception e) {
                tracer.severe("Failed reading response body", e);
            }
        } else {
            tracer.severe("Failed sending request", event.getExcetpion());
        }
        tracer.info("*****************************************");
    }
            ]]>
        </programlisting>

    </section>

</section>