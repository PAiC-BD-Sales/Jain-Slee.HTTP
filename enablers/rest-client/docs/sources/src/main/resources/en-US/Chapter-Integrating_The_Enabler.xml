<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Enabler_REST_Client_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="integrating">

	<title>Integrating the &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler</title>
	
	<para>This chapter explains how to setup a JAIN SLEE Service Sbb to use the Enabler.</para>

	<para>In short terms, a Service's Sbb will define the Enabler's Sbb as a child, and to achieve that it will need to setup the XML Descriptor, Abstract Class and SbbLocalObject interface.</para>
	
	<important><para>The Service's Sbb will be referred as the Parent Sbb in the following sections.</para></important>

	<section id="parent_sbb_local_object_interface">
		
		<title>The Parent's SbbLocalObject Interface</title>
		
		<para>The &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler Sbb provides asynchronous callbacks to the Parent's Sbb, and that can only be achieved if the Parent's SbbLocalObject extends a specific Java interface, deployed also by the Enabler. The Enabler uses the Parent's SbbLocalObject when a callback to the Parent's Sbb is needed.</para>
		
		<para>The SbbLocalObject which must be used or extended by the Parent's Sbb is named <literal>RESTClientEnablerParentSbbLocalObject</literal>, which extends the <literal>org.restcomm.slee.SbbLocalObjectExt</literal> and <literal>RESTClientEnablerParent</literal> interfaces, the latter declares the callbacks which must be implemented in the Parent's Sbb Abstract Class:</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
package org.restcomm.slee.enabler.rest.client;

public interface RESTClientEnablerParent {

	public void onResponse(RESTClientEnablerChildSbbLocalObject child,
			RESTClientEnablerResponse response);

}
		]]>
		</programlisting>
		
		<variablelist>
		
			<varlistentry>
				<term>The <literal>onResponse(RESTClientEnablerChildSbbLocalObject,
			RESTClientEnablerResponse)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler providing the result of executing a REST request, which besides containing the executed REST request, also contains either the received HTTP Response, or the exception which was thrown when executing the request. It also provides the child sbb which was used to execute the request.</para>
				</listitem>
			</varlistentry>
			
		</variablelist>
				
	</section>
	
	<section id="handling_http_responses">
		<title>Handling HTTP Responses Provided by the Enabler</title>

		<para>Please refer to the <ulink url="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/index.html">Apache HTTP Client 4.x Tutorial</ulink> for detailed instructions on how to process the HTTP Response object, the code below is just a simple example of tracing the request information, the response status and content:</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
	@Override
	public void onResponse(RESTClientEnablerChildSbbLocalObject child,
			RESTClientEnablerResponse response) {

		String uri = response.getRequest().getUri();
		RESTClientEnablerRequest.Type type = response.getRequest().getType();
		HttpResponse httpResponse = response.getHttpResponse();
		if (httpResponse != null) {
			String content = null;
			if (httpResponse.getEntity() != null) {
				try {
					content = EntityUtils.toString(httpResponse.getEntity());
				} catch (Exception e) {
					tracer.severe("failed to convert response content to String", e);
				}
			}
			tracer.info("onResponse. Child '" + child + "', request type '"
					+ type + "', uri '" + uri + "', status '"
					+ httpResponse.getStatusLine().getStatusCode()
					+ "', response content '" + content + "'");
		} else {
			tracer.info("onResponse. Child '" + child + "', request type '"
					+ type + "', uri '" + uri + "', exception '"
					+ response.getExecutionException() + "'");
		}
	}
		]]>
		</programlisting>
		            
	</section>
	
	<section id="parent_sbb_abstract_class">
		<title>The Parent's Sbb Abstract Class</title>
		<para>The Parent Sbb Abstract Class must implement the callbacks on it's SbbLocalObject, that is, must implement the <literal>RESTClientEnablerParent</literal> interface discussed in last section.</para>
		<para>The Enabler's Sbb is a Child Sbb, and JAIN SLEE 1.1 Child Relations requires an abstract method in the Sbb Abstract Class, to retrieve the <literal>org.restcomm.slee.ChildRelationExt</literal> object, which is used to create or access specific Child Sbbs. This method should be:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	public abstract ChildRelationExt getRESTClientEnablerChildRelation();
		]]>
		</programlisting>
	</section>
	
	<section id="parent_sbb_xml_descriptor">
		<title>The Parent's Sbb XML Descriptor</title>
		<para>The Parent's Sbb must define a reference to the Enabler's Child Sbb, declare which is the method name to get the related ChildRelation object, and also ensure the SbbLocalObject interface is defined correctly.</para>
		<para>A reference to the Enabler's Child Sbb is defined right after the Parent's Sbb Vendor ID element, using the following XML element:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<sbb-ref>
    		<sbb-name>RESTClientEnabler</sbb-name>
			<sbb-vendor>org.restcomm</sbb-vendor>
			<sbb-version>1.0</sbb-version>
    		<sbb-alias>restClientChildSbb</sbb-alias>
    	</sbb-ref>
		]]>
		</programlisting>
		<para>The method name to get the Enabler's ChildRelation object must be defined after the CMP Fields (if any), this XML element links the sbb-alias previously defined with the abstract method declared in the Parent's Sbb Abstract Class:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<get-child-relation-method>                	
        	<sbb-alias-ref>restClientChildSbb</sbb-alias-ref>
            <get-child-relation-method-name>getRESTClientEnablerChildRelation</get-child-relation-method-name>
            <default-priority>0</default-priority>
        </get-child-relation-method>
		]]>
		</programlisting>
		<para>Finally, after the <literal>sbb-abstract-class</literal> element the Parent's SbbLocalObject interface name is defined:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<sbb-local-interface>
            <sbb-local-interface-name>RESTClientEnablerParentSbbLocalObject</sbb-local-interface-name>
        </sbb-local-interface>
		]]>
		</programlisting>		
        
        <important><para>The Sbb local object interface may be an interface which extends <literal>RESTClientEnablerParentSbbLocalObject</literal>, for instance one that extends multiple Enabler Parent Sbb local object interfaces.</para></important>
                
	</section>
	
	 
		
</chapter>

