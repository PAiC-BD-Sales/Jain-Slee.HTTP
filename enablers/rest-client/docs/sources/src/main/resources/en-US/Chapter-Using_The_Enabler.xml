<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Enabler_REST_Client_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="using_the_enabler">

	<title>Using the &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler</title>
	
	<para>In the last chapter we integrated the Enabler in the JAIN SLEE Service's Sbb, the Parent Sbb, in this chapter it is explained how to use the Enabler's Sbb, the Child Sbb.</para>
	
	<section id="the_child_sbblocalobject_interface">
		
		<title>The Child's SbbLocalObject Interface</title>
		
		<para>The &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler Sbb, the Child Sbb, implements the <literal>RESTClientEnablerChildSbbLocalObject</literal>, which extends the <literal>org.restcomm.slee.SbbLocalObjectExt</literal> and <literal>RESTClientEnablerChild</literal> interfaces, the latter declares the methods which can be used to interact with the REST Web Service:</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
package org.restcomm.slee.enabler.rest.client;

public interface RESTClientEnablerChild {

	public void execute(RESTClientEnablerRequest request) throws Exception;

}
		]]>
		</programlisting>
		
		<variablelist>
		
			<varlistentry>
				<term>The <literal>execute(RESTClientEnablerRequest)</literal> method:</term>
				<listitem>
					<para>Executes the specified request asynchronously.</para>
				</listitem>
			</varlistentry>
			
		</variablelist>
		
	</section>
	
	<section id="creating_and_retrieving_the_child_sbb">
		<title>Creating And Retrieving The Child Sbb</title>
		<para>The Child Relation in the Parent Sbb Abstract Class is used to create and retrieve the Child Sbb:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	RESTClientEnablerChild sbb = null;
    // creation
    try {
        sbb = (RESTClientEnablerChild) getRESTClientEnablerChildRelation().create(childName);                
    }
    catch (Exception e) {
      tracer.severe("Failed to create child sbb", e);      
    }
    // retrieval
    try {
        sbb = (RESTClientEnablerChild) getRESTClientEnablerChildRelation().get(childName);                
    }
    catch (Exception e) {
      tracer.severe("Failed to retrieve child sbb", e);      
    }]]>
		</programlisting>				
	</section>
	
	<section id="creating_requests">
		<title>Creating Requests for REST Resources</title>
		<para>Requests are instances of <literal>RESTClientEnablerRequest</literal>, which include all the mandatory and optional data, needed by the Enabler to send the HTTP messages to the REST Web Services.</para>
		<para>The only mandatory data is the request type (the HTTP message method name) and the REST Web Service URI, but the application using the enabler may also include a SignPost OAuthConsumer object, to sign the request according to OAuth protocol, additional headers and/or content to include in the HTTP message, and content. The following Java code examples the creation of a POST request to update status in the Twitter network:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	String uri = "http://api.twitter.com/1/statuses/update.json?status="
			+ URLEncoder.encode(
							"Hello Twitter!", "UTF-8");
	CommonsHttpOAuthConsumer consumer = 
		new CommonsHttpOAuthConsumer(twitterConsumerKey,
		twitterConsumerSecret);
	consumer.setTokenWithSecret(twitterAccessToken,twitterAccessTokenKey);
	RESTClientEnablerRequest request = new RESTClientEnablerRequest(
		RESTClientEnablerRequest.Type.POST, uri)
		.setOAuthConsumer(consumer);
		]]>
		</programlisting>
		            
	</section>
		 
		
</chapter>

